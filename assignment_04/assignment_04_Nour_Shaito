class Task:
    task_id=0
    def __init__(self,description,priority):
        self.__description=description
        self.__priority=priority
        self.__completed=False
        self.__next=None
        Task.task_id+=1
        self.id=Task.task_id
    def getDescription(self):
        return self.__description
    def setDescription(self,description):
        self.__description=description
    def getPriority(self):
        return self.__priority
    def setPriority(self,priority):
        self.__priority=priority
    # def getTaskId(self):
    #     return self.__id
    # def setTaskId(self,task_id):
    #     self.__id=task_id
    def getCompleted(self):
        return self.__completed
    def setCompleted(self,completed):
        self.__completed=completed
    def getNext(self):
        return self.__next
    def setNext(self,new_next):
        self.__next=new_next
class TaskManager:
    def __init__(self):
        self.header=None
        self.size=0
    def task_queue(self,description,priority):
        t=Task(description,priority)
        print(t.id)
        if self.size==0:
            self.header=t
            self.size+=1
        else:
            if (t.getPriority() > self.header.getPriority()):
              t.setNext(self.header)
              self.header = t
              self.size += 1
            else:
              current=self.header
              previous=current
              while current!=None and current.getPriority()>=t.getPriority():
                  # print(current.getPriority())
                  # print(t.getPriority())
                  previous=current
                  current=current.getNext()
              previous.setNext(t)
              t.setNext(current)
              self.size+=1
    def findId(self,id):
        current=self.header
        print("test")
        print(current.id)
        o_id=current.id
        while o_id!=id and current!=None:
            current=current.getNext()
            o_id=current.id
        if o_id==id:
            print("desc was",current.getDescription())
        else:
            print('id was not found')
    def find_Highest_P(self):
        current=self.header
        # highest_task=Task
        while (current.getNext() != None ):
          current2 = current
          while (current.next != None ):
              if current2.getPriority()>current.getPriority():
                  highest_task=current2
          current = current.next
class History:
    def __init__(self):
      self.header = None
      self.size = 0
    def push(self, t):
      t.next = self.header
      self.header = t
      self.size += 1
taskm=TaskManager()
# t=Task(5,4)
# t1=Task(3,2)
# t2=Task(1,4)
# t3=Task(1,4)
# t3=Task(1,4)
# print(t3.task_id)
# taskm.task_queue(5,4)
# taskm.task_queue(2,5)
# taskm.task_queue(6,1)
# taskm.findId(3)
# ht=History()
# ht.push()
#-----------------------------------------
choice=""
while(choice!="7"):
#print menu
  print("""1. Adding a new task to the task manager.
2. Getting a task from the queue given a task id
3. Marking the highest priority task as completed and putting
it in the task history.
4. Displaying all tasks in order of priority.
5. Displaying only the tasks that are not completed.
6. Displaying the last completed task.
7. Exit
- - - - - - - - - - - - - - -""")
#-----------------------------------------
#user choice
  choice=input("Enter your choice: ")
  while(not choice.isnumeric()):
      choice=input("Error, please enter a valid number: ")
#1-----------------------------------------
if(choice=="1"):
    task_desc=input("Enter a new task description: ")
    task_priority=input("Enter its priority: ")
    taskm.task_queue(task_desc,task_priority)
#2-----------------------------------------
    if(choice=="2"):
        id_task=input("Enter ID of the task: ")
        if(id_task=="0"):
            print("This ID is not available")
        else:
            taskm.findId(int(id_task))
#7-----------------------------------------
  if(choice=="7"):
    print("EXIT the APP")
